<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OpenBMC-1_构建开发环境</title>
    <link href="/2023/03/21/OpenBmc-1_%E6%9E%84%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/03/21/OpenBmc-1_%E6%9E%84%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="构建OpenBMC开发环境"><a href="#构建OpenBMC开发环境" class="headerlink" title="构建OpenBMC开发环境"></a>构建OpenBMC开发环境</h1><p>原文地址：</p><p><a href="https://github.com/openbmc/docs/blob/master/development/dev-environment.md" title="https://github.com/openbmc/docs/blob/master/development/dev-environment.md">https://github.com/openbmc/docs/blob/master/development/dev-environment.md</a></p><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>OpenBMC是基于Yocto项目的框架和编译工具链开发的，所以OpenBMC README 主要提供了Yocto和OpenBMC的使用方法和信息。如果采用传统的方式（硬件环境+烧写工具+全源码编译）编译、验证和调试你修改后的代码的话，会比较慢并很麻烦，所以本指南主要介绍如何使用OpenBMC软件开发套件 (SDK) 和QEMU，进行快速编码、编译和验证测试的方法。</p><p>SDK是基于BitBake构建工具的开发套件，而BitBake是Yocto发行版的构建工具。SDK提供了构建OpenBMC应用程序所需的所有库和交叉编译器，可以在不用构建整个OpenBMC镜像的前提下，提供一种编译OpenBMC应用程序和库的方法，然后再将其复制到正在运行的系统上进行测试验证。</p><p>QEMU是一个软件仿真器，可以用于运行OpenBMC镜像。</p><p>本文档主要介绍如何设置OpenBMC开发环境和安装SDK的步骤。</p><p>出于测试目的，本指南默认使用 Romulus 系统，因为这是为每个持续集成（CI）测试的系统，这意味着它是最稳定的。</p><h2 id="2-安装-Linux-环境"><a href="#2-安装-Linux-环境" class="headerlink" title="2. 安装 Linux 环境"></a>2. 安装 Linux 环境</h2><p>如果已经在使用Linux了，并且已经安装了一些额外的软件包，那么你可以跳到第3步。</p><p>推荐你使用最新的Ubuntu LTS（当前为20.04）版本用于OpenBMC开发环境，其他版本的Linux也可以使用，但其风险较大，如果你使用的是Windows或MacOS，那么推荐使用VirtualBox或VMware来运行开发环境。</p><ol><li><p>在您的计算机（Mac、Windows、Linux）上安装VirtualBox或VMware</p><p>两种虚拟机工具都有免费版本，其中VirtualBox是OpenBMC核心开发人员使用最多的。</p><blockquote><p>📍<em><strong>注意</strong></em><em>：如果你使用虚拟机（VM）来构建（BitBake）完整的OpenBMC镜像，需要为VM分配尽可能多的资源，推荐配置是8个线程、16GB 内存、200GB 硬盘；如果仅用于SDK和QEMU构建的话，可以使用创建VM时推荐的默认值。</em></p></blockquote></li><li><p>安装最新的Ubuntu LTS版本</p><p>大多数的OpenBMC社区开发人员都在使用Ubuntu，并且下面的qemu就是基于18.04构建的，最新的应该也可以使用。Fedora等其他Linux发行版也是如此，但同样，OpenBMC核心团队对这些发行版的测试不如Ubuntu那么多。</p></li><li><p>VM和主机之间进行复制&#x2F;粘贴设置（VirtualBox）</p><ul><li>启动并运行VM</li><li>设备 -&gt; 插入访客添加 CD 映像（安装）</li><li>设备 -&gt; 共享剪贴板 -&gt; 双向</li><li>重启（虚拟机）</li></ul></li><li><p>安装所需的软件包</p></li></ol><p>请参阅：<a href="https://github.com/openbmc/openbmc/blob/master/README.md#1-prerequisite" title="https://github.com/openbmc/openbmc/blob/master/README.md#1-prerequisite">https://github.com/openbmc/openbmc/blob/master/README.md#1-prerequisite</a></p><p>也可直接执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install -y gawk wget git-core git diffstat unzip texinfo gcc-multilib build-essential chrpath socat cpio python python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev pylint3 xterm sed cvs subversion help2man make gcc g++ desktop-file-utils libgl1-mesa-dev libglu1-mesa-dev mercurial autoconf automake groff curl lzop asciidoc npm meson ninja tree<br><br></code></pre></td></tr></table></figure><blockquote><p>📍<em><strong>注意</strong></em><em>：在Ubuntu系统下，安装软件包之前需要执行“sudo apt-get update”命令更新一下源。</em></p></blockquote><h2 id="3-下载并安装-SDK"><a href="#3-下载并安装-SDK" class="headerlink" title="3. 下载并安装 SDK"></a>3. 下载并安装 SDK</h2><p>OpenBMC软件开发套件(SDK)包含一个跨平台编译工具链和一组OpenBMC应用程序的运行依赖库。SDK需要安装在你用于开发OpenBMC应用程序的机器上，而不是安装在BMC运行环境本身上。</p><p>通常，一个BMC的SDK不能用于为其他BMC的开发，这是由于平台ABI（二进制接口）、libc、内核或固件的参数配置不同，而造成的。</p><p>Romulus 是专门用于演示的BMC平台。</p><p>要开始使用 SDK：</p><ol><li><p>下载最新的SDK（也可以下载最新稳定版本）</p><p>建议你创建一个目录来存储SDK脚本和安装目录，以保持你的工作空间井井有条</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/sdk<br><span class="hljs-built_in">cd</span> ~/sdk<br>wget https://jenkins.openbmc.org/job/latest-master-sdk/label=docker-builder,target=romulus/lastSuccessfulBuild/artifact/deploy/sdk/oecore-x86_64-arm1176jzs-toolchain-nodistro.0.sh <span class="hljs-comment"># 下载最新版本</span><br>或<br>wget https://jenkins.openbmc.org/job/latest-master-sdk/lastStableBuild/label=docker-builder,target=romulus/artifact/deploy/sdk/oecore-x86_64-arm1176jzs-toolchain-nodistro.0.sh    <span class="hljs-comment"># 下载最新稳定版本</span><br><span class="hljs-built_in">chmod</span> u+x oecore-x86_64-arm1176jzs-toolchain-nodistro.0.sh<br></code></pre></td></tr></table></figure><blockquote><p>📍<em><strong>注意</strong></em><em>：也可以利用浏览器打开**（</em><a href="https://jenkins.openbmc.org/" title="https://jenkins.openbmc.org">https://jenkins.openbmc.org*</a><em>）**OpenBMC持续集成管理界面，通过浏览器选择要下载的SDK或QEMU等，并且也可以选择最新或稳定的版本等。</em></p><p><img src="/2023/03/21/OpenBmc-1_%E6%9E%84%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/1.png" alt="1"></p></blockquote></li><li><p>创建安装目录</p><p>建议在&#x2F;opt下，选择合适的位置和名称，最好在目录名称中包含该SDK支持的日期和系统，例如：&amp;#x20;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /opt/bmcsdk<br>sudo <span class="hljs-built_in">mkdir</span> -p /opt/bmcsdk/ast2500-`<span class="hljs-built_in">date</span> +%F`    <span class="hljs-comment">#创建带时间的文件夹</span><br></code></pre></td></tr></table></figure></li><li><p>安装SDK</p><p>运行以下命令安装 SDK，当命令要求“输入SDK的目标目录”时，输入上一步中创建的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> u+x oecore-x86_64-arm1176jzs-toolchain-nodistro.0.sh<br>./oecore-x86_64-arm1176jzs-toolchain-nodistro.0.sh <br></code></pre></td></tr></table></figure><p><img src="/2023/03/21/OpenBmc-1_%E6%9E%84%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/2.png" alt="2"></p></li><li><p>安装完成</p><p>完成时，安装脚本将指示进度并给出如下完成消息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">SDK has been successfully <span class="hljs-built_in">set</span> up and is ready to be used. <br>Each time you wish to use the SDK <span class="hljs-keyword">in</span> a new shell session, you need to <span class="hljs-built_in">source</span><br>the environment setup script e.g. $ . /...path-to-sdk.../environment-setup-arm1176jzs-openbmc-linux-gnueabi    <span class="hljs-comment"># 执行此命令配置SDK开环环境</span><br></code></pre></td></tr></table></figure></li><li><p>配置SDK开发环境</p><p>执行如下命令，并确保没有错误，你也可以通过执行不同版本的environment-setup-XXXX脚本，来配置不同的SDK开发环境环境。到这里，你已拥有了OpenBMC的开发环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">. /opt/bmcsdk/ast2500-2021-07-03/environment-setup-arm1176jzs-openbmc-linux-gnueabi<br><br></code></pre></td></tr></table></figure><p>可以通过 <code>export</code> 命令查看环境变量：</p><p><img src="/2023/03/21/OpenBmc-1_%E6%9E%84%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/3.png" alt="3"></p></li></ol><h2 id="4-下载并启动QEMU"><a href="#4-下载并启动QEMU" class="headerlink" title="4. 下载并启动QEMU"></a>4. 下载并启动QEMU</h2><ol><li><p>在openbmc&#x2F;qumu分支，下载最新的QEMU模拟器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://jenkins.openbmc.org/job/latest-qemu-x86/lastSuccessfulBuild/artifact/qemu/build/qemu-system-arm <span class="hljs-built_in">chmod</span> u+x qemu-system-arm<br></code></pre></td></tr></table></figure></li><li><p>下载Romulus镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://jenkins.openbmc.org/job/latest-master/label=docker-builder,target=romulus/lastSuccessfulBuild/artifact/openbmc/build/tmp/deploy/images/romulus/obmc-phosphor-image-romulus.static.mtd<br></code></pre></td></tr></table></figure><p><img src="/2023/03/21/OpenBmc-1_%E6%9E%84%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/4.png" alt="4"></p><blockquote><p>📍<em><strong>注意</strong></em><em>：从上图可以查看到，当前最新的编译日期是2023年3月21日</em></p></blockquote></li><li><p>使用下载的Romulus镜像启动QEMU&amp;#x20;</p><blockquote><p>📍<em><strong>注意</strong></em><em>：要让REST、SSH和IPMI工作在您的QEMU中，您必须将一些主机端口连接到QEMU中的REST、SSH和IPMI端口，在这个例子中，端口为2222、2443、2623，你也可以使用任何你喜欢的端口</em>。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./qemu-system-arm -m 256 -M romulus-bmc -nographic \<br>    -drive file=./obmc-phosphor-image-romulus.static.mtd,format=raw,<span class="hljs-keyword">if</span>=mtd \<br>    -net nic \<br>    -net user,hostfwd=:127.0.0.1:2222-:22,hostfwd=:127.0.0.1:2443-:443,hostfwd=udp:127.0.0.1:2623-:623,hostname=qemu<br></code></pre></td></tr></table></figure><blockquote><p>📍<em><strong>注意</strong></em><em>：默认情况下，Jenkins和openbmc-test-automation分别使用SSH和HTTPS端口、即22和443，IPMI使用623端口。如果使用2222端口链接SSH不成功，可以使用22端口链接SSH、443端口链接HTTPS和623端口链接IPMI</em>。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./qemu-system-arm -m 256 -machine romulus-bmc -nographic \<br>    -drive file=./obmc-phosphor-image-romulus.static.mtd,format=raw,<span class="hljs-keyword">if</span>=mtd \<br>    -net nic \<br>    -net user,hostfwd=:127.0.0.1:22-:22,hostfwd=:127.0.0.1:443-:443,hostfwd=tcp:127.0.0.1:80-:80,hostfwd=tcp:127.0.0.1:2200-:2200,hostfwd=udp:127.0.0.1:623-:623,hostfwd=udp:127.0.0.1:664-:664,hostname=qemu<br></code></pre></td></tr></table></figure></li><li><p>等待QEMU启动，并登录&amp;#x20;</p><p><img src="/2023/03/21/OpenBmc-1_%E6%9E%84%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/5.png" alt="5"></p><p>使用默认用户名root、默认密码0penBmc（注意 0 是零）登录。</p></li><li><p>检查系统运行状态</p><p>在控制台中看到很多服务启动，你可以运行 <code>obmcutil</code>命令来查看OpenBMC的服务状态，当您看到以下提示时，说明已成功启动并就绪</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@openbmc:~<span class="hljs-comment"># obmcutil state</span><br>CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready<br>CurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.Off<br>CurrentHostState    : xyz.openbmc_project.State.Host.HostState.Off<br></code></pre></td></tr></table></figure><blockquote><p>📍<em><strong>注意</strong></em><em>：要退出（并终止）QEMU进程，请运行：ctrl+a x</em></p></blockquote></li></ol><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://mp.weixin.qq.com/s/az9LQXRzDpP-0bScL9huzw">01-搭建OpenBMC开发环境(基于SDK快速开发) (qq.com)</a></p><p><a href="https://github.com/openbmc/openbmc/blob/master/README.md#1-prerequisite">https://github.com/openbmc/openbmc/blob/master/README.md#1-prerequisite</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>OpenBMC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenBMC-0_简介</title>
    <link href="/2023/03/17/OpenBMC-0_%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/03/17/OpenBMC-0_%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>在说OpenBMC之前，绕不开两个概念：BMC（Baseboard Manager Controller，简称BMC）、IPMI（Intelligent Platform Management Interface）。</p><h3 id="BMC"><a href="#BMC" class="headerlink" title="BMC"></a>BMC</h3><p>先说一下BMC（Baseboard Manager Controller，简称BMC），BMC应用了IPMI架构的智能性，是嵌入在计算机（通常是服务器）主板上的专用的微控制器。它是负责管理系统和管理软件与服务器平台硬件之间的一个接口。</p><p>简单来说，BMC就是用于监控和管理服务器的专用控制器，普通的PC是没有的，服务器的产品必配，因为相对于普通的PC来说，服务器在稳定性、安全性、可靠性、性能、可管理性等方面的要求都更高更严苛，这时候就需要BMC来管控服务器。</p><p>BMC的主要功能包括：</p><ul><li>设备信息管理：服务器型号、制造商、日期、各部件生产和技术信息、机箱信息、主板信息等、BMC信息（服务器主机名、IP、BMC固件版本等信息）；</li><li>服务器状态监控管理：对服务器各部件（CPU、内存、硬盘、风扇、机框等）的温度、电压等健康状态进行检测；</li><li>服务器远程控制管理：服务器的开关机、重启、维护、固件更新、系统安装等；</li><li>维护管理：日志管理、用户管理、BIOS管理、告警管理等。</li></ul><h3 id="IPMI"><a href="#IPMI" class="headerlink" title="IPMI"></a>IPMI</h3><p>IPMI：智能平台管理接口（Intelligent Platform Management Interface）原本是一种<a href="https://zh.wikipedia.org/wiki/Intel" title="Intel">Intel</a>架构的企业系统的周边设备所采用的一种工业标准。IPMI 能够横跨不同的操作系统、固件和硬件平台，可以智能的监控、控制和自动回报大量服务器的运作状况，以降低服务器系统成本。</p><p>IPMI独立于操作系统外自行运作，并容许管理者即使在缺少操作系统或系统管理软件、或受监控的系统关机但有接电源的情况下仍能远程管理系统。IPMI也能在操作系统启动后活动，与系统管理功能一并使用时还能提供加强功能，IPMI只定义架构和接口格式成为标准，详细实现可能会有所不同。</p><p>IPMI包含了一个以 基板管理控制器(<a href="https://zh.wikipedia.org/w/index.php?title=Baseboard_management_controller&action=edit&redlink=1" title="BMC">BMC</a>) 为主的控制器和其他分布在不同系统模块（被称为“卫星”控制器）的管理控制器，卫星控制器包含了相同的架构透过IPMB(Intelligent Platform Management Bus&#x2F;Bridge) - 一个<a href="https://zh.wikipedia.org/wiki/I%C2%B2C" title="I²C">I²C</a> (Inter-Integrated Circuit)加强实现的系统接口链接到基板管理控制器(BMC)，基板管理控制器(BMC) 也能与 远程管理控制协议(RMCP) - 一个在此规格内的特殊有线协议一同被管理。</p><h3 id="BMC于IPMI是什么关系？"><a href="#BMC于IPMI是什么关系？" class="headerlink" title="BMC于IPMI是什么关系？"></a>BMC于IPMI是什么关系？</h3><p>简而言之，IPMI是一种规范，一种协议，BMC包含其中，BMC是其中最重要的一个控制器，BMC就是服务器主板上一块独立的小板卡，有自己独立的处理器，和控制系统，通过IPMB、LPC（low-pin-count-interface）、SMBus等接口与主机硬件或者主机系统进行通信，并通过网络、串行&#x2F;Moderm、PCI等接口传向本地主机&#x2F;远程服务器提供查询和控制等功能</p><p>OpenBMC是BMC 的Linux发行版，旨在跨越异构系统，包括企业，高性能计算（HPC），电信和云规模数据中心等系统的管理。</p><p><img src="/2023/03/17/OpenBMC-0_%E7%AE%80%E4%BB%8B/image_V625De4u_R.png" alt="bmc"></p>]]></content>
    
    
    
    <tags>
      
      <tag>OpenBMC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo插入本地图片</title>
    <link href="/2023/03/16/hexo%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
    <url>/2023/03/16/hexo%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo插入本地图片"><a href="#hexo插入本地图片" class="headerlink" title="hexo插入本地图片"></a>hexo插入本地图片</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>TIP</p><ul><li>该文章以fluid主题为例讲解；</li></ul><ul><li>文中提到的：”<strong>站点配置</strong>“ 指的 Hexo 博客目录下的 <code>_config.yml</code>，”<strong>主题配置</strong>“ 指的是 <code>theme/fluid/_config.yml</code> 或者 <code>_config.fluid.yml</code> ，注意区分；</li><li>本指南中提到的 <code>source</code> 目录都指的是博客目录下的 <code>source</code> 文件夹，不推荐修改主题内 <code>source</code> 目录；</li><li>每次无论 <code>hexo g</code> 或 <code>hexo s</code>，都最好先使用 <code>hexo clean</code> 清除本地缓存；</li><li>页面结果以本地 <code>hexo s</code> 为准，部署后的异常大部分是线上缓存原因，在确认没有报错的情况下，等待若干时间后即可正常；</li></ul><h2 id="方案步骤"><a href="#方案步骤" class="headerlink" title="方案步骤"></a>方案步骤</h2><h3 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h3><p>修改站点配置<code>_config.yml</code>:将<code>post_asset_folder:</code> 选项设置为<code>true</code>（注意true前空格）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">post_asset_folder: true<br></code></pre></td></tr></table></figure><p>设置完后，我们再次使用<code>hexo new &quot;hexo插入本地图片&quot;</code>命令来创建文章时，会在<code>_posts</code>下自动生成一个和文章同名的文件夹，可以用来存放数据：</p><p><img src="/2023/03/16/hexo%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/%E7%9B%AE%E5%BD%95.png" alt="目录"></p><p>同样，也可以自己在<code>source</code>路径下自建<code>image</code>文件夹，用来存放数据，注意：必须是source路径下！否则无法识别(不建议这样做)。</p><h3 id="准备照片"><a href="#准备照片" class="headerlink" title="准备照片"></a>准备照片</h3><p>将要引用的图片放到文件夹”<code>hexo插入本地图片</code>“下。(假设图片名为“<code>_posts目录.png</code>”)</p><p><img src="/2023/03/16/hexo%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/%E5%9B%BE%E7%89%87.png" alt="图片"></p><h3 id="md文件中插入图片"><a href="#md文件中插入图片" class="headerlink" title=".md文件中插入图片"></a>.md文件中插入图片</h3><p>在.md使用如下形式引用图片</p><blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[错误时描述]</span>(hexo插入本地图片/_posts目录.png)<br></code></pre></td></tr></table></figure></blockquote><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>使用以下命令：</p><blockquote><p>npm install <a href="https://github.com/CodeFalling/hexo-asset-image">https://github.com/CodeFalling/hexo-asset-image</a> –save</p></blockquote><p><strong>注意 不要使用<code>npm install hexo-asset-image --save</code>这个命令来安装,版本号不对</strong>，会导致图片依然无法识别，作者在这上面折腾了3个小时才找到原因</p><h3 id="md文件名称和图片存放文件夹名称不同时"><a href="#md文件名称和图片存放文件夹名称不同时" class="headerlink" title=".md文件名称和图片存放文件夹名称不同时"></a>.md文件名称和图片存放文件夹名称不同时</h3><p>注意 重命名md文件之后记得重命名文件夹，当md文件的名称与文件夹名称不同时，映射关系以md文件名称为主。会导致src图片路径找不到</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>检查<code>_config.yml</code> 文件的<code>post_asset_folder:</code>选项是否为<code>true</code></li><li>将要引用的图片放到文件夹<code>kk</code>下</li><li>安装插件<code>hexo-asset-image</code></li><li>在md中引用图片</li><li>检查md文件的文件名称和图片存放文件夹名称是否相同</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/koo070/articles/16548228.html">独特且押韵 (cnblogs.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>常用git命令</title>
    <link href="/2023/03/16/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/03/16/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>git使用过程中记录的一些常用命令，根据使用情况随时更新。</p><span id="more"></span><h2 id="一，Git全局的配置"><a href="#一，Git全局的配置" class="headerlink" title="一，Git全局的配置"></a>一，Git全局的配置</h2><p><em>配置文件为 ~&#x2F;<code>.gitconfig</code></em></p><p><strong>常用配置命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看当前的配置信息：</span><br><br><span class="hljs-variable">$git</span> config --list<br><br><span class="hljs-comment">#编辑配置文件：</span><br><br><span class="hljs-variable">$git</span> config -e [--global]<br><br><span class="hljs-comment">#配置提交代码时的账户信息：</span><br><br><span class="hljs-variable">$git</span> config [--global] user.name <span class="hljs-string">&quot;[name]&quot;</span><br><br><span class="hljs-variable">$git</span> config [--global] user.email <span class="hljs-string">&quot;[email address]&quot;</span><br></code></pre></td></tr></table></figure><h2 id="二，增加-x2F-删除文件"><a href="#二，增加-x2F-删除文件" class="headerlink" title="二，增加&#x2F;删除文件"></a>二，增加&#x2F;删除文件</h2><p><strong>常用增加&#x2F;删除文件命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#添加指定文件到暂存区</span><br><br><span class="hljs-variable">$git</span> add [file1] [file2] ...<br><br><span class="hljs-comment">#添加指定目录到暂存区，包括子目录</span><br><br><span class="hljs-variable">$git</span> add [<span class="hljs-built_in">dir</span>]<br><br><span class="hljs-comment">#添加当前目录的所有文件到暂存区</span><br><br><span class="hljs-variable">$git</span> add .<br><br><span class="hljs-comment">#添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交</span><br><br><span class="hljs-variable">$git</span> add -p<br><br><span class="hljs-comment">#删除工作区文件，并且将这次删除放入暂存区</span><br><br><span class="hljs-variable">$git</span> <span class="hljs-built_in">rm</span> [file1] [file2] ...<br><br><span class="hljs-comment">#停止追踪指定文件，但该文件会保留在工作区</span><br><br><span class="hljs-variable">$git</span> <span class="hljs-built_in">rm</span> --cached [file]<br><br><span class="hljs-comment">#改名文件，并且将这个改名放入暂存区</span><br><br><span class="hljs-variable">$git</span> <span class="hljs-built_in">mv</span> [file-original] [file-renamed]<br></code></pre></td></tr></table></figure><h2 id="三，代码提交"><a href="#三，代码提交" class="headerlink" title="三，代码提交"></a>三，代码提交</h2><p><strong>常用代码提交命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#提交暂存区到仓库区</span><br><span class="hljs-variable">$git</span> commit -m [message]<br> <br><span class="hljs-comment">#提交暂存区的指定文件到仓库区</span><br><span class="hljs-variable">$git</span> commit [file1] [file2] ... -m [message]<br> <br><span class="hljs-comment">#提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="hljs-variable">$git</span> commit -a<br> <br><span class="hljs-comment">#提交时显示所有diff信息</span><br><span class="hljs-variable">$git</span> commit -v<br> <br><span class="hljs-comment">#使用一次新的commit，替代上一次提交</span><br><span class="hljs-variable">$git</span> commit --amend -m [message]<br> <br><span class="hljs-comment">#重做上一次commit，并包括指定文件的新变化</span><br><span class="hljs-variable">$git</span> commit --amend [file1] [file2] ..<br></code></pre></td></tr></table></figure><h2 id="四，分支操作"><a href="#四，分支操作" class="headerlink" title="四，分支操作"></a>四，分支操作</h2><p><strong>常用分支操作命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#列出所有本地分支</span><br><span class="hljs-variable">$git</span> branch<br> <br><span class="hljs-comment">#列出所有远程分支</span><br><span class="hljs-variable">$git</span> branch -r<br> <br><span class="hljs-comment">#列出所有本地分支和远程分支</span><br><span class="hljs-variable">$git</span> branch -a<br> <br><span class="hljs-comment">#新建一个分支，但依然停留在当前分支</span><br><span class="hljs-variable">$git</span> branch [branch-name]<br> <br><span class="hljs-comment">#新建一个分支，并切换到该分支</span><br><span class="hljs-variable">$git</span> checkout -b [branch]<br> <br><span class="hljs-comment">#新建一个分支，指向指定commit</span><br><span class="hljs-variable">$git</span> branch [branch] [commit]<br> <br><span class="hljs-comment">#新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="hljs-variable">$git</span> branch --track [branch] [remote-branch]<br> <br><span class="hljs-comment">#切换到指定分支，并更新工作区</span><br><span class="hljs-variable">$git</span> checkout [branch-name]<br> <br><span class="hljs-comment">#切换到上一个分支</span><br><span class="hljs-variable">$git</span> checkout -<br> <br><span class="hljs-comment">#建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="hljs-variable">$git</span> branch --set-upstream [branch] [remote-branch]<br> <br><span class="hljs-comment">#合并指定分支到当前分支</span><br><span class="hljs-variable">$git</span> merge [branch]<br> <br><span class="hljs-comment">#选择一个commit，合并进当前分支</span><br><span class="hljs-variable">$git</span> cherry-pick [commit]<br> <br><span class="hljs-comment">#删除分支</span><br><span class="hljs-variable">$git</span> branch -d [branch-name]<br></code></pre></td></tr></table></figure><h2 id="五，查看提交变更"><a href="#五，查看提交变更" class="headerlink" title="五，查看提交变更"></a>五，查看提交变更</h2><p><strong>常用 git log 命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#显示有变更的文件</span><br><span class="hljs-variable">$git</span> status<br> <br><span class="hljs-comment">#显示当前分支的版本历史</span><br><span class="hljs-variable">$git</span> <span class="hljs-built_in">log</span><br> <br><span class="hljs-comment">#显示commit历史，以及每次commit发生变更的文件</span><br><span class="hljs-variable">$git</span> <span class="hljs-built_in">log</span> --<span class="hljs-built_in">stat</span><br> <br><span class="hljs-comment">#显示指定文件相关的每一次diff</span><br><span class="hljs-variable">$git</span> <span class="hljs-built_in">log</span> -p [file]<br> <br><span class="hljs-comment">#显示过去5次提交</span><br><span class="hljs-variable">$git</span> <span class="hljs-built_in">log</span> -5 --pretty --oneline<br> <br><span class="hljs-comment">#显示指定文件是什么人在什么时间修改过</span><br><span class="hljs-variable">$git</span> blame [file]<br> <br><span class="hljs-comment">#显示暂存区和工作区的差异</span><br><span class="hljs-variable">$git</span> diff<br> <br><span class="hljs-comment">#显示暂存区和上一个commit的差异</span><br><span class="hljs-variable">$git</span> diff --cached [file]<br> <br><span class="hljs-comment">#显示某次提交的元数据和内容变化</span><br><span class="hljs-variable">$git</span> show [commit]<br> <br><span class="hljs-comment">#显示某次提交发生变化的文件</span><br><span class="hljs-variable">$git</span> show --name-only [commit]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/16/hello-world/"/>
    <url>/2023/03/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RISCV特权架构</title>
    <link href="/2022/03/20/RISCV%E7%89%B9%E6%9D%83%E6%9E%B6%E6%9E%84/"/>
    <url>/2022/03/20/RISCV%E7%89%B9%E6%9D%83%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="RV32-x2F-64-特权架构"><a href="#RV32-x2F-64-特权架构" class="headerlink" title="RV32&#x2F;64 特权架构"></a>RV32&#x2F;64 特权架构</h1><h2 id="1-三种权限模式"><a href="#1-三种权限模式" class="headerlink" title="1. 三种权限模式"></a>1. 三种权限模式</h2><ul><li>机器模式（machine mode）  </li><li>监管者模式（supervisor mode）</li><li>用户模式（user mode）<br>[^注]：XLEN指代整数寄存器的宽度</li></ul><h2 id="2-特权指令布局"><a href="#2-特权指令布局" class="headerlink" title="2. 特权指令布局"></a>2. 特权指令布局</h2><p><img src="/2022/03/20/RISCV%E7%89%B9%E6%9D%83%E6%9E%B6%E6%9E%84/RISCV%E7%89%B9%E6%9D%83%E6%8C%87%E4%BB%A4.png" alt="RISCV特权指令"></p><h2 id="3-简单嵌入式系统的机器模式"><a href="#3-简单嵌入式系统的机器模式" class="headerlink" title="3. 简单嵌入式系统的机器模式"></a>3. 简单嵌入式系统的机器模式</h2><p>机器模式是 RISC-V 中 hart（hardware thread ,硬件线程）可以执行的<strong>最高权限模式</strong>。<br>机器模式最重要的特性是<strong>拦截</strong>和<strong>处理异常</strong>（不寻常的运行时事件）的能力，RISC-V 将异常分为两类。一类是<strong>同步异常</strong>，这类异常在指令执行期间产生，如访问了无效的存储器地址或执行了具有无效操作码的指令时。另一类是<strong>中断</strong>，它是与指令流异步的外部事件。<br>另外，RISC-V 中实现精确异常，在 M 模式运行期间可能发生的<strong>同步异常</strong>有五种：</p><ul><li>访问错误异常 当物理内存的地址不支持访问类型时发生（例如尝试写入 ROM）。</li><li>断点异常 在执行 ebreak 指令，或者地址或数据与调试触发器匹配时发生。</li><li>环境调用异常 在执行 ecall 指令时发生。</li><li>非法指令异常 在译码阶段发现无效操作码时发生。</li><li>非对齐地址异常 在有效地址不能被访问大小整除时发生，例如地址为 0x12 的amoadd.w。</li></ul><h2 id="4-机器模式下的异常处理"><a href="#4-机器模式下的异常处理" class="headerlink" title="4. 机器模式下的异常处理"></a>4. 机器模式下的异常处理</h2><p>八个控制状态寄存器（CSR）是机器模式下异常处理的必要部分：</p><ul><li><strong>mtvec</strong>（Machine Trap Vector）它保存发生异常时处理器需要跳转到的地址。</li><li><strong>mepc</strong>（Machine Exception PC）它指向发生异常的指令。</li><li><strong>mcause</strong>（Machine Exception Cause）它指示发生异常的种类。</li><li><strong>mie</strong>（Machine Interrupt Enable）它指出处理器目前能处理和必须忽略的中断。</li><li><strong>mip</strong>（Machine Interrupt Pending）它列出目前正准备处理的中断。</li><li><strong>mtval</strong>（Machine Trap Value）它保存了陷入（trap）的附加信息：地址例外中出错<br>的地址、发生非法指令例外的指令本身，对于其他异常，它的值为 0。</li><li><strong>mscratch</strong>（Machine Scratch）它暂时存放一个字大小的数据。</li><li><strong>mstatus</strong>（Machine Status）全局中断使能寄存器，以及许多其他的状态.</li></ul><p><img src="/2022/03/20/RISCV%E7%89%B9%E6%9D%83%E6%9E%B6%E6%9E%84/mstatus%E6%8E%A7%E5%88%B6%E7%8A%B6%E6%80%81%E5%AF%84%E5%AD%98%E5%99%A8.png" alt="mstatus 控制状态寄存器"><br>只有在全局中断使能位 <strong>mstatus.MIE</strong> 置 1 时才会产生中断.此外，每个中断在控制状态寄存器 mie 中都有自己的使能位。<br><strong>当一个 hart 发生异常时，硬件自动经历如下的状态转换：</strong></p><ul><li>将异常指令的  PC 保存在 <em><strong>mepc</strong></em> 中，PC 被设置为 <em><strong>mtvec</strong></em>(异常时跳转地址)。（对于同步异常，<em><strong>mepc</strong></em>指向导致异常的指令；对于中断，它指向中断处理后应该恢复执行的位置。）</li><li>根据异常来源设置 <em><strong>mcause</strong></em>（指示异常的种类），并将 <em><strong>mtval</strong></em> 设置为出错的地址或者其它适用于特定异常的信息字。</li><li>把控制状态寄存器 <em><strong>mstatus</strong></em> 中的 <em><strong>MIE</strong></em> 位置零以禁用中断，并把先前的 <em><strong>MIE</strong></em> 值保留到 <em><strong>MPIE</strong></em> 中。</li><li>发生异常之前的权限模式保留在 <em><strong>mstatus</strong></em> 的 <em><strong>MPP</strong></em> 域中，再把权限模式更改为 <em><strong>M</strong></em> 。图 10.5 显示了 <em><strong>MPP</strong></em> 域的编码（如果处理器仅实现 <em><strong>M</strong></em> 模式，则有效地跳过这个步骤）。</li></ul><p>为避免覆盖整数寄存器中的内容，中断处理程序先在最开始用 <em><strong>mscratch</strong></em> 和整数寄存器（例如 a0）中的值交换。通常，软件会让 <em><strong>mscratch</strong></em> 包含指向附加临时内存空间的指针，处理程序用该指针来保存其主体中将会用到的整数寄存器。在主体执行之后，中断程序会恢复它保存到内存中的寄存器，然后再次使用 <em><strong>mscratch</strong></em> 和 <em><strong>a0</strong></em> 交换，将两个寄存器恢复到它们在发生异常之前的值。最后，处理程序用 <em><strong>mret</strong></em> 指令（ <em><strong>M</strong></em> 模式特有的指令）返回。 <em><strong>mret</strong></em> 将 <em><strong>PC</strong></em> 设置为 <em><strong>mepc</strong></em> ，通过将 <em><strong>mstatus</strong></em> 的 <em><strong>MPIE</strong></em> 域复制到MIE 来恢复之前的中断使能设置，并将权限模式设置为 <em><strong>mstatus</strong></em> 的 <em><strong>MPP</strong></em> 域中的值。这基本是前一段中描述的逆操作。<br>除了上面介绍的 <em><strong>mret</strong></em> 指令之外，M 模式还提供了另外一条指令：<em><strong>wfi（Wait For Interrupt）</strong></em> 。<em><strong>wfi</strong></em> 通知处理器目前没有任何有用的工作，所有它应该进入低功耗模式，直到任何使能有效的中断等待处理，即<strong>mie&amp;mip ≠ 0</strong>。  </p><h2 id="5-监管者模式"><a href="#5-监管者模式" class="headerlink" title="5. 监管者模式"></a>5. 监管者模式</h2><p>M 模式下只能执行可信任的代码，对于一些无法判定是否可信或者代码较大的情况，需要对不受信任的进程提供隔离，故使用基于页面的虚拟内存构成了监管者模式（S 模式）的核心。<br>默认情况下异常交给M模式下的异常处理程序，但RISC-V 提供了一种异常委托机制。通过该机制可以选择性地将中断和同步异常交给 S 模式处理，而完全绕过 M 模式，从而提高了处理速度。<br><strong>mideleg（Machine Interrupt Delegation，机器中断委托）CSR</strong> 控制将哪些中断委托给 <em><strong>S</strong></em> 模式。与 <em><strong>mip</strong></em> 和 <em><strong>mie</strong></em> 一样， <em><strong>mideleg</strong></em> 中的每个位对应相同的异常。<br>委托给 <em><strong>S</strong></em> 模式的任何中断都可以被 <em><strong>S</strong></em> 模式的软件屏蔽。<em><strong>sie（Supervisor Interrupt Enable，监管者中断使能）</strong></em> 和 <em><strong>sip（Supervisor Interrupt Pending，监管者中断待处理）CSR</strong></em> 是 <em><strong>S</strong></em> 模式的控制状态寄存器，他们是 <em><strong>mie</strong></em> 和 <em><strong>mip</strong></em> 的子集。它们有着和 <em><strong>M</strong></em> 模式下相同的布局，但在 <em><strong>sie</strong></em> 和 <em><strong>sip</strong></em> 中只有与由 <em><strong>mideleg</strong></em> 委托的中断对应的位才能读写。那些没有被委派的中断对应的位始终为零。<br>同步异常的处理类似与上面的中断委托，也是通过 <em><strong>mideleg</strong></em> 委托给 <em><strong>S</strong></em> 模式。<br><em><strong>S</strong></em> 模式有几个异常处理 CSR：<em><strong>sepc</strong></em> 、<em><strong>stvec</strong></em> 、<em><strong>scause</strong></em> 、<em><strong>sscratch</strong></em> 、<em><strong>stval</strong></em> 和 <em><strong>sstatus</strong></em> ，它们执行描述的 <em><strong>M</strong></em> 模式 CSR 相同的功能。下图显示了 <em><strong>sstatus</strong></em> 寄存器的布局。监管者异常返回指令 <em><strong>sret</strong></em> 与 <em><strong>mret</strong></em> 的行为相同，但它作用于 <em><strong>S</strong></em> 模式的异常处理 <em><strong>CSR</strong></em>，  而不是 <em><strong>M</strong></em> 模式的 <em><strong>CSR</strong></em> 。<br><img src="/2022/03/20/RISCV%E7%89%B9%E6%9D%83%E6%9E%B6%E6%9E%84/sstatus.png" alt="sstatus"> </p><h2 id="6-基于页面的虚拟内存"><a href="#6-基于页面的虚拟内存" class="headerlink" title="6. 基于页面的虚拟内存"></a>6. 基于页面的虚拟内存</h2><p><img src="/2022/03/20/RISCV%E7%89%B9%E6%9D%83%E6%9E%B6%E6%9E%84/Sv32%E9%A1%B5%E8%A1%A8%E9%A1%B9.png" alt="Sv32页表项">    </p><p>图为一个<em><strong>RV32</strong></em>的页表项（ <em><strong>PTE</strong></em> ），从右往左每一位都代表不同的含义：</p><ul><li><em><strong>V</strong></em> 位决定了该页表项的其余部分是否有效（<em><strong>V &#x3D; 1</strong></em> 时有效）。若 <em><strong>V &#x3D; 0</strong></em>，则任何遍历<br>到此页表项的虚址转换操作都会导致页错误。</li><li><em><strong>R、W</strong></em> 和 <em><strong>X</strong></em> 位分别表示此页是否可以读取、写入和执行。如果这三个位都是 0，<br>那么这个页表项是指向下一级页表的指针，否则它是页表树的一个叶节点。</li><li><em><strong>U</strong></em> 位表示该页是否是用户页面。若 <em><strong>U &#x3D; 0</strong></em>，则 <em><strong>U</strong></em> 模式不能访问此页面，但 <em><strong>S</strong></em> 模式<br>可以。若 <em><strong>U &#x3D; 1</strong></em>，则 <em><strong>U</strong></em> 模式下能访问这个页面，而 <em><strong>S</strong></em> 模式不能。</li><li><em><strong>G</strong></em> 位表示这个映射是否对所有虚址空间有效，硬件可以用这个信息来提高地址转换的性能。这一位通常只用于属于操作系统的页面。</li><li><em><strong>A</strong></em> 位表示自从上次 <em><strong>A</strong></em> 位被清除以来，该页面是否被访问过。</li><li><em><strong>D</strong></em> 位表示自从上次清除 <em><strong>D</strong></em> 位以来页面是否被弄脏（例如被写入）。</li><li><em><strong>RSW</strong></em> 域留给操作系统使用，它会被硬件忽略。</li><li><em><strong>PPN</strong></em> 域包含物理页号，这是物理地址的一部分。若这个页表项是一个叶节点，那么 <em><strong>PPN</strong></em> 是转换后物理地址的一部分。否则 <em><strong>PPN</strong></em> 给出下一节页表的地址（多级页表）<br>系统的分页机制由一个 <em><strong>S</strong></em> 模式下 <strong>satp（Supervisor Address Translation and Protection，监管者地址转换和保护）</strong> 的控制状态寄存器来控制。</li></ul><p><img src="/2022/03/20/RISCV%E7%89%B9%E6%9D%83%E6%9E%B6%E6%9E%84/satp.png" alt="satp">  </p><p><em><strong>MODE</strong></em> 决定了开启分页以及页表级数， <em><strong>ASID（Address Space Identifier</strong></em> ， 地址空间标识符）域是可选的，它可以用来降低上下文切换的开销。其中 <em><strong>PNN</strong></em> 保存了该进程根页表的物理地址，相当于下图中的页表指针。  </p><p><img src="/2022/03/20/RISCV%E7%89%B9%E6%9D%83%E6%9E%B6%E6%9E%84/%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2%E6%9C%BA%E5%88%B6.png" alt="地址转换机制"></p><ul><li>这个二级页表结构中，首先根据页表指针定位到第一级页表项，由虚拟地址的第一个页号找到第一个页表中页号对应的位置，该处存储的是下一级页表的页表指针。</li><li>第二级页表指针加上虚拟地址中的第二个页号，在二级页表中找到对应的位置，该位置存储的是实际的物理地址。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>RISC-V</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sel4编译于运行</title>
    <link href="/2022/03/20/sel4%E7%BC%96%E8%AF%91%E4%BA%8E%E8%BF%90%E8%A1%8C/"/>
    <url>/2022/03/20/sel4%E7%BC%96%E8%AF%91%E4%BA%8E%E8%BF%90%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="seL4的编译与运行"><a href="#seL4的编译与运行" class="headerlink" title="seL4的编译与运行"></a>seL4的编译与运行</h1><p>本文档描述了基于spike平台下的seL4的编译与运行，包括环境的搭建以及相关依赖的安装。</p><h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1  环境配置"></a>1  环境配置</h2><p>若使用常规的本地系统进行环境配置，比较繁琐，为此本文采用 Docker 将依赖性与机器隔离，进行依赖性的管理。</p><h3 id="1-1-Ubuntu-Docker安装"><a href="#1-1-Ubuntu-Docker安装" class="headerlink" title="1.1  Ubuntu Docker安装"></a>1.1  Ubuntu Docker安装</h3><ul><li>使用官方安装脚本自动安装</li></ul><p>安装命令如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">curl -fsSL <span class="hljs-keyword">https</span>://<span class="hljs-built_in">get</span>.docker.com | bash -s docker <span class="hljs-comment">--mirror Aliyun</span><br></code></pre></td></tr></table></figure><p>也可以使用国内 daocloud 一键安装命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -sSL https:<span class="hljs-regexp">//g</span>et.daocloud.io/docker | sh<br></code></pre></td></tr></table></figure><ul><li><p>手动安装方法<br>手动安装方法不在赘述，可参考相关文档：</p><p><a href="https://www.runoob.com/docker/ubuntu-docker-install.html">手动安装Docker方法</a></p></li></ul><h3 id="1-2-Docker镜像加速"><a href="#1-2-Docker镜像加速" class="headerlink" title="1.2  Docker镜像加速"></a>1.2  Docker镜像加速</h3><ul><li>Ubuntu14.04、Debian7Wheezy<br>对于使用 <strong>upstart</strong> 的系统而言，编辑 <em>&#x2F;etc&#x2F;default&#x2F;docker</em> 文件，在其中的 <em>DOCKER_OPTS</em> 中配置加速器地址：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">DOCKER_OPTS=&quot;--registry-mirror=https://registry.docker-cn.com&quot;<br></code></pre></td></tr></table></figure><p>  重新启动服务:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo service docker restart</span><br></code></pre></td></tr></table></figure><ul><li>Ubuntu16.04+、Debian8+、CentOS7<br>对于使用 <strong>systemd</strong> 的系统，请在 <em>&#x2F;etc&#x2F;docker&#x2F;daemon.json</em> 中写入如下内容（如果文件不存在请新建该文件）:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;&quot;registry-mirrors&quot;:[&quot;https://reg-mirror.qiniu.com/&quot;]&#125;<br></code></pre></td></tr></table></figure><p>​       之后重新启动服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl daemon-reload</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl restart docker</span><br></code></pre></td></tr></table></figure><ul><li>检查加速器是否生效<br>检查加速器是否生效配置加速器之后，如果拉取镜像仍然十分缓慢，请手动检查加速器配置是否生效，在命令行执行 docker info，如果从结果中看到了如下内容，说明配置成功。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker info</span><br>Registry Mirrors:<br>    https://reg-mirror.qiniu.com<br></code></pre></td></tr></table></figure><h3 id="1-2-Docker卸载"><a href="#1-2-Docker卸载" class="headerlink" title="1.2  Docker卸载"></a>1.2  Docker卸载</h3><ul><li>删除安装包：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> purge docker-ce<br></code></pre></td></tr></table></figure><ul><li>删除镜像、容器、配置文件等内容：</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo rm -rf <span class="hljs-regexp">/var/</span>lib/docker<br></code></pre></td></tr></table></figure><h3 id="1-3-make安装"><a href="#1-3-make安装" class="headerlink" title="1.3   make安装"></a>1.3   make安装</h3><p>使用命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> make<br></code></pre></td></tr></table></figure><h3 id="1-4-使用-Docker-管理-seL4-Camkes-和-L4v-依赖性"><a href="#1-4-使用-Docker-管理-seL4-Camkes-和-L4v-依赖性" class="headerlink" title="1.4  使用 Docker 管理 seL4, Camkes, 和 L4v 依赖性"></a>1.4  使用 Docker 管理 seL4, Camkes, 和 L4v 依赖性</h3><h4 id="1-4-1-请将您的帐户添加到-docker-组"><a href="#1-4-1-请将您的帐户添加到-docker-组" class="headerlink" title="1.4.1   请将您的帐户添加到 docker 组"></a>1.4.1   请将您的帐户添加到 <strong>docker</strong> 组</h4><p>在普通用户下执行 <code>docker</code> 命令需要用 <code>sudo</code> ，没加 <code>sudo</code> 出现了下图所示的提示：<br><img src="/2022/03/20/sel4%E7%BC%96%E8%AF%91%E4%BA%8E%E8%BF%90%E8%A1%8C/1.jpg" alt="1"></p><p>为此，我们需要将该普通用户加入到 <strong>docker</strong> 这个组。</p><p>可以执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo usermod -aG docker $(<span class="hljs-built_in">whoami</span>)<span class="hljs-comment">#后面是用户名</span><br></code></pre></td></tr></table></figure><p>也可以执行下面这条命令：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">sudo gpasswd -<span class="hljs-keyword">a</span> username docker   <span class="hljs-comment">#将普通用户username加入到docker组</span><br></code></pre></td></tr></table></figure><p>加入 <strong>Docker</strong> 组之后，更新一下 <strong>Docker</strong> 组：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">$ <span class="hljs-keyword">new</span><span class="hljs-type">grp</span> docker  <span class="hljs-meta">#更新docker组</span><br></code></pre></td></tr></table></figure><p>现在就可以正常使用 <code>Docker</code> 的命令了。</p><h4 id="1-4-2-获得构建环境"><a href="#1-4-2-获得构建环境" class="headerlink" title="1.4.2  获得构建环境"></a>1.4.2  获得构建环境</h4><p>要获得 <strong>seL4</strong> 和 <strong>Camkes</strong> 的运行构建环境，运行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/SEL4PROJ/</span>seL4-CAmkES-L4v-dockerfiles.git<br>cd seL4-CAmkES-L4v-dockerfiles<br>make user<br></code></pre></td></tr></table></figure><p>这将下载一个容器内的终端，该终端具有构建、模拟和测试 <strong>seL4 &amp; camkes</strong> 程序的所有相关工具，第一次运行，<strong>docker</strong> 将获取相关镜像，等待时间较长。  </p><p>运行成功如下图：</p><p><img src="/2022/03/20/sel4%E7%BC%96%E8%AF%91%E4%BA%8E%E8%BF%90%E8%A1%8C/2.jpg" alt="2"></p><p>运行成功后，设定一个映射的文件夹到容器中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make user HOST_DIR=/home/自己的目录<br></code></pre></td></tr></table></figure><p>为了更简便的进入容器，进行如下设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo $&#x27;alias container=\&#x27;make -C /&lt;path&gt;/&lt;to&gt;/seL4-CAmkES-L4v-dockerfiles user HOST_DIR=$(pwd)\&#x27;&#x27; &gt;&gt; ~/.bashrc<br></code></pre></td></tr></table></figure><p>其中 <em><strong>&#x2F;&lt;path&gt;&#x2F;&lt;to&gt;&#x2F;</strong></em>  是我们后面这个文件夹的根地址，本文实验时的目录就是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo $&#x27;alias container=\&#x27;make -C /home/fan/docker/seL4-CAmkES-L4v-dockerfiles user HOST_DIR=$(pwd)\&#x27;&#x27; &gt;&gt; ~/.bashrc<br></code></pre></td></tr></table></figure><p>这样设置之后，我们就可以在 <strong>seL4-CAmkES-L4v-dockerfiles</strong> 目录下使用 <code>container</code> 命令直接进入容器，正常进入则是使用上面的 <code>make user</code> 进入。</p><h2 id="2-QEMU安装"><a href="#2-QEMU安装" class="headerlink" title="2.  QEMU安装"></a>2.  QEMU安装</h2><p>QEMU安装的两种方法如下：2.1 使用包管理安装，2.2 使用源码安装，推荐使用源码安装。</p><p><strong>注意：</strong> <strong>QEMU</strong> 需要安装在容器内部，若宿主机上已安装 <strong>QEMU</strong>，假设安装目录在 <em>&#x2F;opt&#x2F;qemu&#x2F;bin</em> 则只需要将 <em>qemu</em> 文件夹拷贝到容器与宿主机的映像目录，再配置环境变量即可。</p><h3 id="2-1-使用包管理安装"><a href="#2-1-使用包管理安装" class="headerlink" title="2.1  使用包管理安装"></a>2.1  使用包管理安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install qemu<br></code></pre></td></tr></table></figure><h3 id="2-2-使用源码安装"><a href="#2-2-使用源码安装" class="headerlink" title="2.2  使用源码安装"></a>2.2  使用源码安装</h3><ul><li>下载源码：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://download.qemu.org/qemu-6.1.0-rc3.tar.xz<br>tar xvJf qemu-6.1.0-rc3.tar.xz<br>cd qemu-6.1.0-rc3<br></code></pre></td></tr></table></figure><ul><li>配置：<br>通过 <code>./configure --help</code> 的查看编译时的选项， <code>--target-list</code>选项为可选的模拟器，默认全选。<br><code>--target-list</code> 中的 <code>xxx-soft</code> 和 <code>xxx-linux-user</code> 分别指系统模拟器和应用程序模拟器, 生成的二进制文件名字为<code>qemu-system-xxx</code>和 <code>qemu-xxx</code><br>本文使用如下配置：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir build<br>cd build<br>../configure --prefix=/opt/riscv --target-list=riscv64-softmmu,riscv32-softmmu<br><span class="hljs-meta prompt_"># </span><span class="language-bash">--prefix 选项设置qemu的安装位置绝对路径，之后若要卸载删除qemu只要删除该文件夹即可</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">config完，可以在指定的qemu安装文件夹下面找到config-host.mak文件，</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">该文件记录着qemu配置的选项，可以和自己设置的进行对比，确保配置和自己已知</span><br></code></pre></td></tr></table></figure><ul><li>然后进行编译：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make -j8<br></code></pre></td></tr></table></figure><p>其实就是 <code>make</code> 命令，加上 <code>-j8</code> 则是开始多线程编译，8则是同步的数量。</p><ul><li>导出安装目录：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export PATH=$PATH:/&lt;path&gt;/&lt;to&gt;/qemu-6.1.0-rc3/build<br></code></pre></td></tr></table></figure><p>本文没有执行 <code>sudo make install</code> 命令，所以文件保存在 <code>/build</code> 中，若使用了安装命令，则使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export PATH=$PATH:/opt/riscv64/bin<br></code></pre></td></tr></table></figure><ul><li>验证安装是否正确：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu-system-riscv64 --version<br></code></pre></td></tr></table></figure><p>若出现如下运行结果，则表示安装成功：</p><p><img src="/2022/03/20/sel4%E7%BC%96%E8%AF%91%E4%BA%8E%E8%BF%90%E8%A1%8C/3.jpg" alt="3"></p><p>[原文参考1](<a href="https://dunky-z.github.io/2021/07/23/QEMU%E5%88%9D%E8%AF%86/">QEMU初识 - Dominic (dunky-z.github.io)</a>)</p><p>[原文参考2](<a href="https://zhuanlan.zhihu.com/p/258394849">在 QEMU 上运行 RISC-V 64 位版本的 Linux - 知乎 (zhihu.com)</a>)</p><h2 id="3-安装交叉工具链-riscv-gnu-toolchain"><a href="#3-安装交叉工具链-riscv-gnu-toolchain" class="headerlink" title="3.  安装交叉工具链-riscv-gnu-toolchain"></a>3.  安装交叉工具链-riscv-gnu-toolchain</h2><p><strong>注意：</strong> 同上面的 QEMU 安装，由于Docker的隔离性，riscv-gnu-toolchain 也要安装容器内才能起作用，若宿主机上已安装相关工具链，将安装目录拷贝到映像目录，再配置环境变量即可，无需重新安装。</p><h3 id="3-1-下载源码"><a href="#3-1-下载源码" class="headerlink" title="3.1 下载源码"></a>3.1 下载源码</h3><p>如果访问 github 速度慢，可以从国内 gitee 的 riscv-gnu-toolchain 镜像仓库下载，加快下载速度。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://gitee.com/mirrors/riscv-gnu-toolchain</span><br></code></pre></td></tr></table></figure><p>进入源码目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> riscv-gnu-toolchain</span><br></code></pre></td></tr></table></figure><p>注意上面 clone 的主仓库并不包含子仓库的内容，所以需要继续更新子仓库。注意这里首先排除了 qemu 这个子仓库，一来因为 qemu 完整下载太大；二来 qemu 对 toolchain 的编译本身来说其实并不需要。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">rm</span> qemu</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git submodule update --init --recursive</span><br></code></pre></td></tr></table></figure><p>因为qemu在toolchain，并且文件夹较大，在此处删除了qemu文件夹；耐心等待子仓库下载完成。</p><p>在等待过程中，<em>可能会出现下图这样的错误</em> ，并查找了几种解决的办法：</p><p><img src="/2022/03/20/sel4%E7%BC%96%E8%AF%91%E4%BA%8E%E8%BF%90%E8%A1%8C/5.jpg" alt="5"></p><p><strong>方法1：</strong></p><p>有些资料显示是因为要下载的文件太大，需要扩大传输限制，因此采用如下解决办法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global http.postBuffer 524288000</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --list</span><br></code></pre></td></tr></table></figure><p>执行完可以看到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">http.postbuffer=524288000<br></code></pre></td></tr></table></figure><p>但使用这个办法并没有解决问题.</p><p><strong>方法2：</strong></p><p>由于网络不好，对子模块同步采用分别逐条下载的方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> --recursive https://git.qemu.org/git/qemu.git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> --recursive https://github.com/riscv/riscv-newlib.git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> --recursive https://github.com/riscv/riscv-binutils-gdb.git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> --recursive https://github.com/riscv/riscv-dejagnu.git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> --recursive https://github.com/riscv/riscv-glibc.git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> --recursive https://github.com/riscv/riscv-gcc.git</span><br></code></pre></td></tr></table></figure><p>网络对于GitHub的访问可能较慢，可采用如下两种解决办法：</p><ol><li><p>把 <a href="https://github.com/">https://github.com</a> 替换为国内镜像网站 <a href="https://github.com.cnpmjs.org/">https://github.com.cnpmjs.org</a> 。</p></li><li><p>从码云上进行下载，比如下载 gdb 模块：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> --recursive https://gitee.com/mirrors/riscv-binutils-gdb.git</span><br></code></pre></td></tr></table></figure><p>若下载riscv-gcc时仍出现上述问题，使用：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> --depth 1 --recursive https://gitee.com/mirrors/riscv-binutils-gdb.git</span><br></code></pre></td></tr></table></figure><p>用 git clone –depth&#x3D;1 的好处是限制 clone 的深度，不会下载 Git 协作的历史记录，这样可以大大加快克隆的速度<br>depth用于指定克隆深度，为1即表示只克隆最近一次 commit 。使用起来有什么不同有待考证。</p><p>下载完成之后，由于是分布下载的，riscv-binutils-gdb实际上是两个文件夹内容，需要进行分割：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd riscv-binutils-gdb<br>cp -a * ../riscv-gdb<br>cp -a * ../riscv-binutils<br></code></pre></td></tr></table></figure><p>原始的 riscv-binutils-gdb 文件夹不要删除，里面有 .git 文件。若编译过程中出现从 riscv-binutils-gdb 到 riscv-gdb 或者 riscv-binutils 的 clone 错误，请将 riscv-binutils-gdb 中的隐藏文件也复制到两个目录下并删除 riscv-binutils-gdb 文件夹。<br>务必检查一遍各个子模块文件夹中文件是否充足，作者在下载过程中就出现 riscv-glibc 文件夹内容较少，导致编译不成功，需要将文件夹清空重新下载，并使用<code>make clean</code> 后再重新编译。</p><h3 id="3-2-编译-Linux-的交叉工具链"><a href="#3-2-编译-Linux-的交叉工具链" class="headerlink" title="3.2  编译 Linux 的交叉工具链"></a>3.2  编译 Linux 的交叉工具链</h3><p>在编译之前，一定要安装依赖，否则会报错，认真执行以下命令安装依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev \</span><br><span class="language-bash">                 gawk build-essential bison flex texinfo gperf libtool patchutils bc \</span><br><span class="language-bash">                 zlib1g-dev libexpat-dev git \</span><br><span class="language-bash">                 libglib2.0-dev libfdt-dev libpixman-1-dev \</span><br><span class="language-bash">                 libncurses5-dev libncursesw5-dev</span><br>                 <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install autoconf automake autotools-dev curl python3 libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev</span><br></code></pre></td></tr></table></figure><p>然后进行编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">export</span> RISCV=/opt/riscv</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"> ./configure --prefix=<span class="hljs-variable">$RISCV</span> --enable-multilib</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo make linux</span><br></code></pre></td></tr></table></figure><p>注意配置时指定安装到 <code>/opt/riscv</code>，所以 <code>make</code> 时需要 <code>sudo</code>。</p><h3 id="3-3-导出-toolchain-的安装路径"><a href="#3-3-导出-toolchain-的安装路径" class="headerlink" title="3.3  导出 toolchain 的安装路径"></a>3.3  <strong>导出 toolchain 的安装路径</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export PATH=&quot;$PATH:/opt/riscv/bin&quot;<br></code></pre></td></tr></table></figure><h3 id="3-4-测试-toolchain-是否安装成功"><a href="#3-4-测试-toolchain-是否安装成功" class="headerlink" title="3.4 测试 toolchain 是否安装成功"></a>3.4 测试 toolchain 是否安装成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">riscv64-unknown-linux-gnu-gcc -v</span><br></code></pre></td></tr></table></figure><p>出现类似如下输出表示工具链编译安装正常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">Using built-in specs.<br>COLLECT_GCC=riscv64-unknown-linux-gnu-gcc<br>COLLECT_LTO_WRAPPER=/opt/riscv64/libexec/gcc/riscv64-unknown-linux-gnu/10.1.0/lto-wrapper<br>Target: riscv64-unknown-linux-gnu<br>Configured with: /home/u/ws/riscv64-linux/riscv-gnu-toolchain/riscv-gcc/configure --target=riscv64-unknown-linux-gnu --prefix=/opt/riscv64 --with-sysroot=/opt/riscv64/sysroot --with-system-zlib --enable-shared --enable-tls --enable-languages=c,c++,fortran --disable-libmudflap --disable-libssp --disable-libquadmath --disable-libsanitizer --disable-nls --disable-bootstrap --src=.././riscv-gcc --disable-multilib --with-abi=lp64d --with-arch=rv64imafdc --with-tune=rocket &#x27;CFLAGS_FOR_TARGET=-O2   -mcmodel=medlow&#x27; &#x27;CXXFLAGS_FOR_TARGET=-O2   -mcmodel=medlow&#x27;<br>Thread model: posix<br>Supported LTO compression algorithms: zlib<br>gcc version 10.1.0 (GCC)<br></code></pre></td></tr></table></figure><p><strong>原文参考：</strong></p><p><a href="https://zhuanlan.zhihu.com/p/258394849">在 QEMU 上运行 RISC-V 64 位版本的 Linux - 知乎 </a></p><p><a href="https://dunky-z.github.io/2021/07/28/%E5%9C%A8QEMU%E4%B8%8A%E8%BF%90%E8%A1%8C64%E4%BD%8D%E5%92%8C32%E4%BD%8DRISC-V-Linux/">在QEMU上运行64位和32位RISC-V-Linux </a></p><p><a href="https://blog.csdn.net/a1059526327/article/details/107765353">完美解决 git clone 下载速度太慢的问题</a></p><p><a href="https://blog.csdn.net/agility9527/article/details/108547129">RISCV编译环境搭建：riscv-gnu-toolchain和riscv-tools</a></p><h2 id="4-硬件平台-Spike下编译运行seL4"><a href="#4-硬件平台-Spike下编译运行seL4" class="headerlink" title="4.  硬件平台-Spike下编译运行seL4"></a>4.  硬件平台-Spike下编译运行seL4</h2><ul><li>下载seL4测试项目：<br>首先新建一个文件夹来用于测试：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir ~/seL4test<br>cd ~/seL4test<br></code></pre></td></tr></table></figure><p>我们新建的这个文件夹将来用于和宿主机建立映射，是容器和宿主机联系的桥梁，所以我们要使用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make user HOST_DIR=/home/seL4test<br></code></pre></td></tr></table></figure><p>来建立映像关系。</p><p>接下来进行仓库搭建:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">repo init -u https://github.com/seL4/sel4test-manifest.git#初始化仓库<br>repo sync#默认同步所有仓<br></code></pre></td></tr></table></figure><p><em>有可能会出现如下错误：</em></p><p><img src="/2022/03/20/sel4%E7%BC%96%E8%AF%91%E4%BA%8E%E8%BF%90%E8%A1%8C/4.jpg" alt="4"><br>因为不翻墙的话，是没法访问的，因此设置为清华的镜像源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export REPO_URL=https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/<br></code></pre></td></tr></table></figure><p>再重新执行 <code>repo init</code> 就可以正常运行了。</p><p><em>若出现了如下错误：</em></p><p><img src="/2022/03/20/sel4%E7%BC%96%E8%AF%91%E4%BA%8E%E8%BF%90%E8%A1%8C/6.png" alt="6"></p><p>则可能是因为不是在我们的映射目录下执行的命令，也就是没有在本文中的seL4test下运行。</p><p>切换到映像目录即可解决。</p><p><em>若出现如下问题：</em></p><p><img src="/2022/03/20/sel4%E7%BC%96%E8%AF%91%E4%BA%8E%E8%BF%90%E8%A1%8C/10.png" alt="10"></p><p><code>SyntaxError: invalid syntax</code> 原因是 <strong>python</strong> 的版本不对，查看是否为 <strong>python 3</strong>  ，若否则安装 <strong>python 3</strong> ，网上教程很多，并将 <em>&#x2F;bin&#x2F;repo</em> 首行改为 <strong>python3</strong> 即可。</p><p><a href="https://blog.csdn.net/xuanwolanxue/article/details/104678027">repo安装与简单使用</a></p><p>接下来从这个文件夹进入docker容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">container<br></code></pre></td></tr></table></figure><ul><li>接下来对seL4进行编译：</li></ul><p>先在 seL4test 中建立一个用来编译的文件夹，然后在里面进行接下来的操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir cbuild<br>cd cbuild<br>../init-build.sh -DPLATFORM=spike -DRISCV64=1 -DSIMULATION=TRUE<br></code></pre></td></tr></table></figure><p>若没有报错，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ninja<br></code></pre></td></tr></table></figure><ul><li>最后在qemu上进行仿真：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./simulate<br></code></pre></td></tr></table></figure><p>若编译成功，则会由如下界面：</p><p><img src="/2022/03/20/sel4%E7%BC%96%E8%AF%91%E4%BA%8E%E8%BF%90%E8%A1%8C/7.jpg" alt="7"></p><p>则对spike平台下的seL4编译运行成功。</p><p><em>可能会出现如下错误：</em></p><p><img src="/2022/03/20/sel4%E7%BC%96%E8%AF%91%E4%BA%8E%E8%BF%90%E8%A1%8C/8.jpg" alt="8"></p><p>根据他的提示可以看出是内存分配失败，默认分配的内存是4095M，对于使用虚拟机的我们来说太大了，因此我们需要找到他的设置地址，在build.ninja文件中可以找到：</p><p><img src="/2022/03/20/sel4%E7%BC%96%E8%AF%91%E4%BA%8E%E8%BF%90%E8%A1%8C/9.png" alt="9"></p><p>重新使用 <code>ninja</code> 命令，问题解决。</p>]]></content>
    
    
    
    <tags>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>haps自动化脚本</title>
    <link href="/2022/03/20/haps%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/"/>
    <url>/2022/03/20/haps%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="HAPS-自动化测试脚本使用文档"><a href="#HAPS-自动化测试脚本使用文档" class="headerlink" title="HAPS 自动化测试脚本使用文档"></a>HAPS 自动化测试脚本使用文档</h1><h2 id="1-自动化脚本获取"><a href="#1-自动化脚本获取" class="headerlink" title="1.  自动化脚本获取"></a>1.  自动化脚本获取</h2><p>为了节省配置 haps 的时间，编写了自动化执行的脚本，脚本已上传代码仓库，路径如下：<a href="http://gerrit.eswin.cn/c/eswin/bootrom/+/11228">自动化执行脚本</a></p><p>该路径下包括使用 cmake 编译 bootrom 代码的相关配置文件以及在 haps 上自动化执行脚本 hapsTest.py 。</p><h2 id="2-配置脚本文件"><a href="#2-配置脚本文件" class="headerlink" title="2.  配置脚本文件"></a>2.  配置脚本文件</h2><p>为了能在自己的路径中使用，需要配置脚本中的相关路径，有两种方案：</p><h3 id="方案一：修改脚本文件"><a href="#方案一：修改脚本文件" class="headerlink" title="方案一：修改脚本文件"></a>方案一：修改脚本文件</h3><p>需要修改的路径见图所示：</p><p><img src="/2022/03/20/haps%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/1.png"> </p><p>将其中的路径配置成自己的路径。</p><h3 id="方案二：按脚本配置路径"><a href="#方案二：按脚本配置路径" class="headerlink" title="方案二：按脚本配置路径"></a>方案二：按脚本配置路径</h3><p>将代码路径配置为如下结构：</p><p><img src="/2022/03/20/haps%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/2.png"> </p><p>其中：</p><ul><li>autoflow 为自动化脚本的路径</li><li>binary 为bootrom二进制文件路径</li><li>envset 为在haps 上测试需要的环境。</li></ul><p>主要是 envset 文件夹的设置，需要到 &#x2F;opt 文件夹下将openocd 相关文件拷贝过来，然后建立一个riscv64_unknown_elf_toolchain 的软链接，用来打开gdb使用。配置完这些，就可以开始我们的自动化haps测试了。</p><p><strong>note</strong>:  自动化脚本中gdb的执行过程中打了一些断点，若编译的主函数不是btr_main.c，根据需要注释掉脚本中的断点。</p><h2 id="3-编译-bootrom"><a href="#3-编译-bootrom" class="headerlink" title="3.  编译 bootrom"></a>3.  编译 bootrom</h2><p>本文的测试代码在 btr_main.c 中实现，有两种编译方法:</p><h3 id="方案一：使用-makefile-进行编译"><a href="#方案一：使用-makefile-进行编译" class="headerlink" title="方案一：使用 makefile 进行编译"></a>方案一：使用 makefile 进行编译</h3><p>该方法是原始代码仓库的编译方法，如果要在 haps 上运行，需要修改链接文件保证能够正常运行，到<a href="http://gerrit.eswin.cn/c/eswin/bootrom/+/11249">该目录下</a>获取 patch，打到自己的 bootrom 代码里。接下来，</p><p>执行步骤如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /bootrom<br>make clean<br>make PLATFORM=fpga<br></code></pre></td></tr></table></figure><p>若没有错误，编译后如下路径将产生如下三个文件：</p><p><img src="/2022/03/20/haps%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/3.png"> </p><p>将其中的 btr.elf 拷贝到成都服务器中我们刚刚创建的 binary 文件夹中即可。其中拷贝的方法后面有介绍。</p><h3 id="方案二：使用-cmake-编译"><a href="#方案二：使用-cmake-编译" class="headerlink" title="方案二：使用 cmake 编译"></a>方案二：使用 cmake 编译</h3><p>一样，首先去该路径下将 &#x2F;haps_verify_tools 文件夹下载下来<a href="http://gerrit.eswin.cn/c/eswin/bootrom/+/11228">编译工具</a>，然后将&#x2F;haps_verify_tools 文件夹放在 &#x2F;bootrom 下，在 &#x2F;haps_verify_tools 文件夹下打开终端执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir build<br>cd ./build<br>rm -rf *<br>cmake -Dtarget_platform=fpga ..<br>make<br></code></pre></td></tr></table></figure><p>可以将这些命令写成一个脚本，直接一键执行，脚本文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>echo &quot;start build...&quot;<br>cd ./build<br>rm -rf *<br>cmake -Dtarget_platform=fpga ..<br>make<br><span class="hljs-meta prompt_">#</span><span class="language-bash">scp /home/fan/workspace/bootrom/haps_verify/build/btr.elf e0005153@10.10.130.211:/home/e0005153/workspace/win2030/binary</span><br></code></pre></td></tr></table></figure><p>若没有错误，编译完将在build文件夹下产生 btr.elf 文件。</p><h2 id="4-传送文件到服务器"><a href="#4-传送文件到服务器" class="headerlink" title="4.  传送文件到服务器"></a>4.  传送文件到服务器</h2><p>我们可以尝试如下方法;</p><ul><li><p>使用 scp 命令，从本地发送到服务器，参考命令如下（由于安全限制，此方法本人已不可用）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp 二进制文件路径/btr.elf 服务器账号@10.10.130.211:/home/e0005153/workspace/win2030/binary<br></code></pre></td></tr></table></figure></li><li><p>使用 ftp 中转</p><ul><li><p>本地主机以及服务器分别安装 filezilla</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install filezilla<br></code></pre></td></tr></table></figure></li><li><p>登录账号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">CRI：地址：10.100.130.32<br>端口号：2123<br>上传账号：cri02 密码CRI888888<br>下载账号：cri01 密码cri888888<br><span class="hljs-meta prompt_">#</span><span class="language-bash">尽量在ftp中创建自己的文件夹，保证不干扰他人的文件查找</span><br></code></pre></td></tr></table></figure><p>登录后界面如下：左边为本地目录，右边为 ftp 目录。</p><p><img src="/2022/03/20/haps%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/4.png"></p></li></ul></li></ul><h2 id="5-haps-上的自动化测试"><a href="#5-haps-上的自动化测试" class="headerlink" title="5.  haps 上的自动化测试"></a>5.  haps 上的自动化测试</h2><p>我们登录成都服务器（需要提前开通权限），其中很多配置已在 &#x2F;opt 中配置好了，我们只需要去自己的目录执行即可，切换到 <strong>第二步</strong> 中 hapsTest.py 的存放路径，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo python  hapsTest.py<br></code></pre></td></tr></table></figure><p>若成功，将会打开三个终端窗口，分别为 gdb 、minicom 、openpcd。</p><ul><li><strong>gdb</strong></li></ul><p><img src="/2022/03/20/haps%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/7.png"> </p><ul><li><strong>minicom</strong></li></ul><p><img src="/2022/03/20/haps%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/8.png"> </p><ul><li><strong>openocd</strong></li></ul><p><img src="/2022/03/20/haps%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/9.png"> </p><p>接下来就在 gdb 中进行调试，在 minicom 中观察输出结果。</p><p><strong>note1</strong>:  若出现如下提示：</p><p><img src="/2022/03/20/haps%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/5.png"> </p><p>请找相关人员开通 sudo 权限。</p><p><strong>note2</strong>:  若出现openpcd无法运行的情况：</p><p><img src="/2022/03/20/haps%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/6.png"> </p><p>先使用命令看一下是否有人占用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef |grep openocd<br></code></pre></td></tr></table></figure><p>若除了自己的账号有别人在占用，则需要沟通使用时间，不允许同时两个人使用；</p><p>若没有别人再用，则可能haps出现里逻辑错误，需要找相关人员重新刷新一下bitfile 才能正常使用。</p><p><strong>note3</strong>:  若无法打开minicom，使用如下命令查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -aux|grep minicom<br></code></pre></td></tr></table></figure><p>若有人占用，但并未使用，可以强制关闭：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kill -9 PID<br></code></pre></td></tr></table></figure><p>当前版本需要使用usb2接口才能正常使用 minicom。</p>]]></content>
    
    
    
    <tags>
      
      <tag>仿真环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EDA环境部署</title>
    <link href="/2022/03/20/EDA%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/03/20/EDA%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="1-EDA-环境部署"><a href="#1-EDA-环境部署" class="headerlink" title="1. EDA 环境部署"></a>1. EDA 环境部署</h2><p>接下来的操作都是在登录的 ETX 上的虚拟机下执行。</p><ul><li><p>首先使用 <code>groups</code> 命令查看是否在 <code>IBU、WIN2030、usersg</code> 这三个 linux group 中，如果有缺少，请联系 IT 加入对应 group（目前IT对应责任人为 白晨 )</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[e0005153@login01 ~]$ groups<br></code></pre></td></tr></table></figure><p> 结果对应如下：</p><p><img src="/2022/03/20/EDA%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/1.png">  </p></li><li><p>在如下目录建立自己的工号的根目录</p><p><img src="/2022/03/20/EDA%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/2-1679282153070-1.png"> </p></li><li><p>在 <code>.cshrc</code> 中添加如下 <code>alias</code></p><p><code>.cshrc</code> 文件可以在个人用户目录下打开，若没有可以创建一个（PS：个人经验）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">alias setup_win2030 &#x27;svn co http://svn.eswin.cn/IBU/WIN_2030/&#x27;<br>alias setup_win2030_dv &#x27;mkdir WIN_2030; SVN co http://svn.eswin.cn/IBU/WIN_2030/asic; svn co http://svn.eswin.cn/IBU/WIN_2030/script; svn co http://svn.eswin.cn/IBU/WIN_2030/setup&#x27;<br>alias sm &quot;source sourceme&quot;<br></code></pre></td></tr></table></figure></li><li><p>checkout 环境仓库</p><p>在前面创建的<em>user id</em>目录下，根据自己需要，创建 <em>workspace</em> 根目录名称（命名随意，本文为 <em>workspace1</em>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir workspace1<br>cd workspace1<br></code></pre></td></tr></table></figure><p>该目录主要是用来下拉 SVN 上的环境，此后的环境部署都在这个文件夹下进行。</p><p>由于 SVN 库上的 <em>validation</em>目录文件较多，且 DE、DV 人员通常用不到 <em>validation</em> 相关目录，建议 DE、DV 不要 checkout <em>validation</em> 目录。</p><p>以下为 checkout 的方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">svn co http:<span class="hljs-comment">//svn.eswin.cn/IBU/WIN_2030/asic</span><br>svn co http:<span class="hljs-comment">//svn.eswin.cn/IBU/WIN_2030/script</span><br>svn co http:<span class="hljs-comment">//svn.eswin.cn/IBU/WIN_2030/setup</span><br></code></pre></td></tr></table></figure><p><strong>note:</strong>  在 checkout 其中的 <em>asic</em> 目录的时候，可能花费的时间较长，需要慢慢等待，若同步的不完全，会造成环境搭建失败，如果显示服务器断开链接或中断，要在 <em>asic</em> 目录下使用命令： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">svn cleanup<br>svn up<br></code></pre></td></tr></table></figure><p><code>svn cleanup</code>来清空， <code>svn up</code> 把文件下载完全。</p></li><li><p>配置 <strong>evfm</strong>、<strong>workspace</strong> 以及<strong>环境变量</strong></p><p>进入 <em>WIN_2030&#x2F;setup</em> 目录，执行命令 <code>source sourceme</code> (一定要在 <em>setup</em> 目录下执行！）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd setup<br>ls <br>source sourceme<br></code></pre></td></tr></table></figure><p><strong>note</strong>: 执行完成后，要按两下 <strong>Enter</strong> 键才能完成</p><p>执行结果如下(部分显示结果)：</p><p><img src="/2022/03/20/EDA%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/3-1679282188749-3.png"> </p><p>与平时在 Linux 中配置环境变量类似，此次环境变量的配置，只在这一个终端内有效，所以接下来的执行都要在这个终端内完成，为了便于操作，建议另开一个终端使用 <code>pwd</code> 命令用来查找路径，方便跳转。</p><p>至此，EDA 环境的部署已经完成。若有其他配置问题，参照 <a href="http://confluence.eswin.com/display/IBU/Setup+WIN2030+Workspace">Setup WIN2030 Workspace - IBU - Confluence (eswin.com)</a>。</p></li></ul><h2 id="2-使用-EDA-进行仿真"><a href="#2-使用-EDA-进行仿真" class="headerlink" title="2.  使用 EDA 进行仿真"></a>2.  使用 EDA 进行仿真</h2><p>使用 EDA 测试有两种方式，一种是直接上传源代码，一种为上传编译好的 bin 文件，接下来分别进行介绍</p><h4 id="2-1-添加-C-用例"><a href="#2-1-添加-C-用例" class="headerlink" title="2.1  添加 C 用例"></a>2.1  添加 C 用例</h4><p>在这种情况中需要关注三个目录&#x2F;文件，分别为：C 用例的存放路径；regress&#x2F;test_list&#x2F;ctest.tl 文件；sim.mk 文件</p><ul><li><p>需要上传的 C 代码存放在位置：</p><p>在以下目录中建立源代码的目录</p><p><img src="/2022/03/20/EDA%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/4-1679282196846-5.png"> </p><p>例如要建立 smmu 的测试 case 的存放路径</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">cd /projects/IBU/WIN_2030/e0005153/worksapce1/asic/dv/tbs/st/top/tc/ctest<br>mkdir smmu<br></code></pre></td></tr></table></figure><p>由于 ETX 的限制，传输文件需要借助 FTP 来中转，具体的操作参照<a href="./pic/%E5%8C%97%E4%BA%ACIC%E8%AE%BE%E8%AE%A1%E5%B9%B3%E5%8F%B0FTP%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.pdf">FTP使用教程</a>，上传代码后，就需要对我们的代码进行编译，其实是环境加代码一块进行了编译。</p></li><li><p>设置 ctest.tl 文件</p><p>ctest.tl 文件的目录如下：</p><p><img src="/2022/03/20/EDA%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/5-1679282203013-7.png"> </p><p>打开 ctest.tl 文件，参照如下命令，在其中添加编译命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">u84_hello_world \<br>-pre_sim_opts+=&quot;bash build_u84.sh -s $&#123;ST_TOP&#125;/tc/ctest/u84/hello_world.c&quot; \<br>-test_case=cpu_test<br></code></pre></td></tr></table></figure><p><strong>note</strong>：注意在行后添加 <strong>“\”</strong> </p><ul><li>第一行用例名称，要求唯一，不与其他用例名称重名。</li><li>第二行为具体的编译命令，<code>-pre_sim_opts</code> 则是调用编译工具生成对应的 <em>bin</em> 文件，所写的 <em>c code</em> 如果是跑在 u84上，则调用 <code>build_u84.sh</code>；如果跑在 e21上，则调用 <code>build_e21.sh</code>； 如果两个 core 都要跑程序，则指定两次 <code>-pre_sim_opts</code> 分别调用 <code>build_u84.sh</code> 和 <code>build_e21.sh</code> 编译各自的case 源文件</li><li>第三行 <code>-test_case=cpu_test</code> 保持不变，所有case都按照这种方式写即可。</li><li>如果编译的文件不止一个，则在代码路径上添加单引号将这些文件引用起来，使其看起来是一个项，如 <code>“build_u84.sh –s ‘1.c 2.c 3.c&#39;&quot;</code>。</li></ul></li><li><p>执行 <code>evfm</code> 命令进行编译</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">evfm -regr <span class="hljs-string">&quot;top.sl&#123;ctest[u84_hello_word,e21_hello_word]&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>等待执行结果，若成功执行后会出现以下结果：</p><img src="EDA环境部署//6.png" style="zoom: 50%;"> <p>执行完成后在以下路径会产生如下文件：</p><img src="EDA环境部署//8.png" style="zoom:80%;"><p>该目录为芯片 <code>rtl+tb</code> 环境的编译目录，上一层文件夹是以编译时间命名的，两个 <em>default</em> 开头的 <em>.log</em> 文件就是就是<code>evfm</code>命令跑用例时产生的，如果跑的过程有出错的情况，就来查看这 <em>.log</em> 文件。</p><p>根据在上面 <em>ctest.tl</em> 文件中填写的用例名称，进入对应目录，也就是在 <em>scpu_hello_world.0.0</em> 文件夹下，有我们需要的 sim.mk 文件。</p><img src="EDA环境部署//9.png" style="zoom:80%;"><p><code>evfm</code> 命令会编译环境和 C 代码，其实环境只需要编译一次，后续不需要再次使用 <code>evfm</code> 命令。</p><p>当我们需要再次编译新的测试 case 时，在前面的步骤执行完以后，可以修改 sim.mk 文件，在其中直接添加编译命令，例如：</p><p><img src="/2022/03/20/EDA%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/10-1679282250141-9.png"> </p><p>我们在其中添加编译 uart 的测试用例，然后在终端中跳转到该文件夹下，使用 <code>sim</code> 命令进行仿真。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /simulation/IBU/WIN_2030/e0005153/workspace1/win2030/sim/top.2021.12.01.16.03.48/ctest/scpu_hello_world.0.0<br>sim<br></code></pre></td></tr></table></figure><p>等待仿真结果。</p><h3 id="2-2-直接添加-bin-文件"><a href="#2-2-直接添加-bin-文件" class="headerlink" title="2.2  直接添加 bin 文件"></a>2.2  直接添加 bin 文件</h3><p>将编译好的 .bin 文件改成 .dat 类型的文件，并将目录直接添加到 sim.mk 文件中，即可直接进行仿真。见下图：</p><p><img src="/2022/03/20/EDA%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/12-1679282256998-11.png">  </p><p>最后一行语句中表示将 <code>uart.dat</code> 添加到 <code>scpu.dat</code> 中，然后使用 <code>sim</code> 命令即可进行仿真。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>仿真环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
